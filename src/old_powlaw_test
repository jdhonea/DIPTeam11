    # Steps:
    # 1. Get the cdf
    # 2. Calculate current gamma curve for gamma x on ranges 0 - 255
    # 3. Find the |distance| between the gamma curve and the image cdf, smaller the value the more similar the curves are
    # 4. If the curve falls within a certain threshold of similarity, gamma transform should be recommended.
    hist = hist.cdf
    hist = [int(x * 255) for x in hist]
    gammaOffset = .5  # Offset to be added to the gamma values to increment them along
    normalHist = np.arange(256)
    lowerGamma = 0
    while (lowerGamma < 25):
        upperSum = 0
        lowerSum = 0
        upperGamma = 1/(1 + gammaOffset)  # The curve related to 1/x
        lowerGamma = 1 + gammaOffset  # The curve related to x
        upperCurve = np.array(255*(normalHist/255)**upperGamma)  # Generate the upper curve
        lowerCurve = np.array(255*(normalHist/255)**lowerGamma)  # Generate the lower curve
        for i in range(0, len(hist), 3):  # Summation every 3 steps
            upperSum += abs(upperCurve[i] - hist[i])
            lowerSum += abs(lowerCurve[i] - hist[i])
        if upperSum < 1500:
            """plt.plot(hist)
            plt.plot(upperCurve)
            plt.show()"""
            return True
        gammaOffset += .5
        # print("Upper Curve:", upperSum, "Lower Curve:", lowerSum)